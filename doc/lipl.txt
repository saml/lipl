====
LIPL
====

:Author: Sam Lee

.. sectnum::
.. contents::

Introduction
============

LIPL is a functional programming language.

Syntax
======

EBNF
----

Below is informal EBNF_

.. _EBNF: http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

::

    letter = (* alphabetic character *)
    digit = '0' | '1' | (* ... *) '9'
    space = ' ' | '\t' (* ... white space character *)
    spaces = space { space }
    ws = [ spaces ]
    nat = digit { digit }
    integer = [ ( '-' | '+' ) ] nat
    float = [ ( '-' | '+' ) ] nat '.' nat

    name = letter { ( letter | digit | '_' | '-' ) }
    ident = name { '.' name }
    number = integer | float
    string = '"' (? characters with escaped '"' ?) '"'
    symbol = ident | '+' | '-' | ...
    list = '[' ws ']'
         | '[' ws expr { ws ',' ws expr } ws ']'
    atom = number | string | symbol
    token = atom | list
    tokens = [ token ] { spaces token }
    expr = tokens
         | '(' ws tokens ws ')'


Atom
----

An atom evaluates to itself, except for bound atoms.

Number
~~~~~~

A number can be an integer: 1, +2, -32532, -00342, ...
Or, a floating point number: +000.234, -23.43, 0.0023402, ...

String
~~~~~~

String is a sequence of characters enclosed inside ``"``.
To use ``"`` inside a string, escape it using ``\``.

Examples include: "hi! i'm a string", "let's escape \"!!", ...

Symbol
~~~~~~

A symbol can be bound. If it's bound, it evaluates to the bound value.
Otherwise, a symbol evaluates to itself.

Identifier
``````````

An identifier starts with an alphabetic character.
It can then include digits, ``-``, and ``_``.

Identifier can be nested using ``.``.
For example, ``name.first`` refers to attribute ``first``
of identifier ``name``.


Expression
----------

An expression is a sequence of whitespace delimited tokens.


Examples
========

declaration::

    = name value

lambda abstraction::

    fun arg-list body

function call::

    fun-name arg1 arg2 ...

list::

    [expr1, expr2, ...]

expression::

    symbol1 symbol2 ...
    | ( symbol1 symbol2 ... )




