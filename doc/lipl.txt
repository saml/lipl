====
LIPL
====

:Author: Sam Lee

.. sectnum::
.. contents::

Introduction
============

LIPL is a functional programming language.

Syntax
======

EBNF
----

Below is informal EBNF_

.. _EBNF: http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

::

    letter = (* alphabetic character *)
    digit = '0' | '1' | (* ... *) '9'
    space = ' ' | '\t' (* ... white space character *)
    spaces = space { space }
    ws = [ spaces ]
    nat = digit { digit }
    integer = [ ( '-' | '+' ) ] nat
    float = [ ( '-' | '+' ) ] nat '.' nat

    name = letter { ( letter | digit | '_' | '-' ) }
    ident = name { '.' name }
    number = integer | float
    string = '"' (? characters with escaped '"' ?) '"'
    symbol = ident | '+' | '-' | ...
    list = '[' ws ']'
         | '[' ws expr { ws ',' ws expr } ws ']'
    atom = number | string | symbol
    term = atom | list
    terms = [ term ] { spaces term }
    expr = terms '\n'
         | '(' ws terms ws ')'


Atom
----

An atom's value is itself, except for bound atoms.

Number
~~~~~~

A number can be an integer: 1, +2, -32532, -00342, ...
Or, a floating point number: +000.234, -23.43, 0.0023402, ...

String
~~~~~~

String is a sequence of characters enclosed inside ``"``.
To use ``"`` inside a string, escape it using ``\``.

Examples include: "hi! i'm a string", "let's escape \"!!", ...

Symbol
~~~~~~

A symbol can be bound. If it's bound, its value is the value of what it is
bound to.
Otherwise, a symbol's value is itself.

An identifier starts with an alphabetic character.
It can then include digits, ``-``, and ``_``.

Identifier can be nested using ``.``.
For example, ``name.first`` refers to attribute ``first``
of identifier ``name``.

``one``, ``twenty-three``, ``Oh001``, ``+::``, ``-->``...
all evaluate to themselves unless they are bound to some other value.


List
----

A list is enclosed with ``[]``. Each element in a list is separated
by ``,``.
A list is homogeneous.

``[1,2,3]`` is a valid list, while ``[1,2,"hi"]`` is not.

Term
----

A term is either a list or an atom.

Expression
----------

An expression is a sequence of whitespace delimited terms.

An expression ends with ``'\n'``.
Or, it can be enclosed in ``()``.
``'\n'`` does not denote the end of current expression when the expression
is enclosed in ``()``.

``+ 1 2``, ``= a (+ 1 2)``, ... are expressions.

Semantics
=========

Function Application
--------------------

``symbol term1 term2 ...`` denotes function application:
``symbol(term1, term2, ...)`` where
``symbol`` is a function.

Function Definition
-------------------

``def symbol [arg1, arg2, ..., argN] body``
creates a new function and binds it to ``symbol``.

::

    def fac [n] (
        if (< n 2)
           1
           (* n (fac (- n 1)))
    )
    fac 4
    ==> 24

defines a factorial function and calls it with argument 4.
So, it returns 24 ``(= 4!)``.

Bind
----

The symbol, ``=``, is a binder.
``= symbol term`` binds ``term`` to ``symbol``.

::

    (= a
       1)
    = b (+ a 40)
    + a b
    ==> 42

Binding to the same symbol can happen only once.

Lambda Abstraction
------------------

``fun [arg1, arg2, ..., argN] body`` creates a nameless function.

::

    (fun [a, b] (if (< a 0) b (* a b)) 1 2
    ==> 2

Conditional
-----------

``if bool-term if-term else-term`` is conditional.
When ``bool-term`` is true, ``if-term`` is evaluated.
Otherwise, ``else-term`` is evaluated.

::

    if (== 1 2) "hey" "bye"
    ==> "bye"


Examples
========

declaration::

    = name value

lambda abstraction::

    fun arg-list body

function call::

    fun-name arg1 arg2 ...

list::

    [expr1, expr2, ...]

expression::

    symbol1 symbol2 ...
    | ( symbol1 symbol2 ... )




