====
LIPL
====

:Author: Sam Lee

.. sectnum::
.. contents::

Introduction
============

LIPL is a functional programming language.

Syntax
======

EBNF
----

Informal EBNF [#ebnf]_ is used.

.. [#ebnf] http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

   - ``{e}`` : zero or more occurrence of e
   - ``[e]`` : zero or one occurrence of e
   - ``(e1 | e2)`` : one occurrence of e1 or e2
   - ``(* e *)`` : e is ignored. comments.
   - ``'e'`` or ``"e"`` : literal e
   - ``? e ?`` : e is special sequence.
     used here to explain difficult express terms.

Predefined non-terminals
------------------------

Predefined non-terminals for convenience.

::

    letter = (* alphabetic character *)
    digit = '0' | '1' | ... '9'
    space = ' ' | '\t' | ...
        (* white space character *)
    spaces = space { space }
        (* one or more spaces (mandatory) *)
    ws = [ spaces ]
        (* optional spaces *)
    nat = digit { digit }
        (* natural number. allowing leading zeros *)
    integer = [ ( '-' | '+' ) ] nat
        (* optional - or + *)
    float = [ ( '-' | '+' ) ] nat '.' nat
        (* floating point number. . must present *)

Lexical items
-------------

Defines what can be a token.

::

    ident = letter { ( letter | digit | '_' | '-' ) }
        (* identifier. starts with a letter. *)
    op = '+' | '-' | ...
        (* predefined operators or functions *)
    boolean = 'True' | 'False'
    number = integer | float
    char = "'" ? any single character ? "'"
        (* unicode character. ' should be escaped. *)
    string = '"' ? characters with escaped '"' ? '"'
    list = '[' ']'
         | '[' token { ',' token } ']'
        (* comma separated tokens. enclosed by [] *)
    token = ident | op | string | number | list | expr
    tokens = token spaces token { spaces token }
        (* space separated tokens *)
    expr = '(' tokens ')'

Expressions
-----------

All expressions are enclosed in ``()``.  And, tokens
in an expression are separated by white-spaces.
Here, white-space token delimiters are omitted.

::

    fun-def = '(' 'def' ident ident-list token ')'
        (* function definition *)
    fun-app = '(' ident idents ')'
        (* function application *)
    ident-list = '(' idents ')'
    idents = ident { spaces ident }

    if = '(' 'if' token token token ')'
        (* conditional *)
    case = '(' 'case' branches ')'
        (* multi-branch conditional *)
    branches = '(' branch ')'
    branch = '(' token token ')'

    let = '(' 'let' pairs token ')'
        (* creating local scope *)
    pairs = branches

    pt = '(' 'pt' ident ident-list ')'
        (* product type *)

    st = '(' 'st' ident ident-list ')'
        (* sum type *)

Lexicon
=======

Explanation of basic building blocks of LIPL.

Boolean
-------

A boolean can be either True or False.

Number
------

A number can be an integer: 1, +2, -32532, -00342, ...
Or, a floating point number: +000.234, -23.43, 0.0023402, ...

A number evaluates to itself. A number cannot be bound.
For example, 42 evaluates to 42.
It can not have another meaning.

Character
---------

A character is any unicode character enclosed in ``''``.
For example, 'a', 'B', '2', '\'' ... are valid characters.

String
------

A string is a sequence of characters enclosed inside ``"``.
Characters that make up a string are not surrounded by ``''``.
For example, "aB2'" is a valid string.

To use ``"`` inside a string, escape it using ``\``.
More examples: "hi! i'm a string", "let's escape \"!!", ...

Identifier
----------

An identifier starts with an alphabetic letter, and continues
with a sequence of digits, letters, ``-``, or ``_``.

For example, abc, abC123, apple-pie, apple_123, ... are valid
identifiers.

An identifier is bound to some other value.

Operator
--------

An operator starts with one of special characters:
``+=_-*&^%$#@!~```.
Otherwise, it is same as identifier, i.e., they denote some
other values.

List
----

A list is enclosed by ``[]``. Elements in a list are separated
by ``,``.

A list is homogeneous.
For example, ``[1,2,3]`` is a valid list, while ``[1,2,"hi"]`` is not.

Token
-----

A token is either a list, a boolean, a number, a character, a string,
an identifier, an operator, or an expression.

It is the smallest meaningful unit in LIPL.

Examples include: foo, 123, "hello world!", '*', +, (+ 1 2), ...

Expression
----------

An expression is a sequence of whitespace delimited tokens.
Since a token can be an expression, nested expressions are allowed.

For example, (+ (- 1 2) 3) is a valid expression.

Structure
=========

Different structures (expressions) are available.

Function Application
--------------------

When the first token in an expression is an identifier or an operator,
the expression is function application expression.

``(func arg1 arg2 ... argN)`` denotes application of a function
named ``func`` on arguments arg1 through argN.

    (+ 1 2)
    ==> 3

applies the operator function ``+`` on arguments 1 and 2.
Since the operator ``+`` adds two numbers, the expression yields 3.

Function Definition
-------------------

To define a function, use **def** keyword.

``(def ident args body)``
defines a new function whose arguments are args and body is body.
And, binds the function to ident.

::

    (def fac n (
        if (< n 2)
           1
           (* n (fac (- n 1)))
    ))
    (fac 4)
    ==> 24

defines a factorial function and calls it with argument 4.
So, it returns 24 *(= 4!)*.

Note that an expression can contain new lines.
And, the line that starts with ``==>`` is the value of previous expression.

::

    (def add (a b) (+ a b))
    (add 2 3)
    ==> 5

defines a function ``add`` that adds two numbers
and calls it with parameters 2 and 3.

You can define a constant using function definition syntax.

::

    (def one () 1)
    (one)
    ==> 1

Here, ``one`` is bound to a function that takes no parameter and returns 1.
So, calling the function ``one`` yields 1.
Note that ``()`` is used to say that the function takes no parameter.

Local Scope
-----------

A local scope can be created using **let** keyword.

``(let ((k1 v1) (k2 v2) ... (kN vN)) body)``
creates a new environment where ki is bound to vi.
Then, it evaluates ``body`` in the new environment.

::

    (def a () "hello")
    (def foo () 2)
    (let ((a 2)
          (b foo))
         (let ((a 1)) a))
    ==> 1

The top-level ``a`` is a function that takes no parameter
and returns "hello". ``foo`` takes no parameter and returns 2.
Then, there are 2 local scopes: one at the top-level, one nested in
the top-level local scope.

In the top-level local scope, ``a`` and ``b`` are both 2 (``b`` is
``foo``, which is 2).
The value of the top-level local scope is the value of the nested
local scope, ``a``.
``a`` in the nested local scope, however, is 1.
So, the value of top-level local scope is 1.

In other words, a local scope created by **let** expression
shadows previously defined identifiers.

Conditional
-----------

If
~~

To create a single branch conditional, use **if** keyword.

``(if bool if-case else-case)`` evaluates ``if-case`` if ``bool``
has true value. Otherwise, it evaluates ``else-case``.

::

    (if (== 1 2) "hey" (if (== 1 1)
                           "bye"
                           "???"))
    ==> "bye"

In the first if expression, ``(== 1 2)`` evaluates to false because
``==`` is equality testing operator and 1 and 2 are not equal.
So, instead of evaluating the string "hey", the second if expression
is evaluated, where ``(== 1 1)`` yields true value.
Hence, "bye" is returned.

Case
~~~~

To use multi-branch conditional, use **case** keyword.

``(case ((bool1 e1) (bool2 e2) ... (boolN eN)))``
tests truth value of booli. As soon as it finds that booli is true,
it evaluates the expression paired with the boolean, ei.

::

    (case (
        ((== 1 2) "one is same as two")
        (False "do not ever evaluate this string")
        ((< 1 2) (case ((True "yay"))))
        (True "will I be evaluated?")
    ))
    ==> "yay"

The above case expression tests the first boolean value returned by
``(== 1 2)``. False is returned. So, it continues on the second
boolean value and third.
On the third expression, ``(< 1 2)``, True is returned.
So, the nested case expression is evaluated. And, "yay" is returned.

Although the fourth boolean value is True, the case expression
does not evaluate it because the third case was already True.

Data Type
---------

Product Type
~~~~~~~~~~~~

To create a product type, use **pt** keyword.

``(pt type-ctor (type1 type2 ... typeN))`` creates a product type
that can be constructed with ``type-ctor``.
When an object of the product type is constructed,
the object has N fields of types type1, type2, ..., typeN.

For example,

::

    (pt Name (String String))
    (Name "fname" "lname")
    ==> (Name "fname" "lname")

creates a product type whose instances include two String fields.
Then, ``(Name "fname" "lname")`` constructs an object with its two fields
initialized to "fname" and "lname".

It is convention to use upper case letter for type constructors
(like Name) and
type names (like String).

Sum Type
~~~~~~~~

To create a sum type, ``st`` keyword can be used.

``(st type-name (type-ctor1 type-ctor2 ... type-ctorN)``
creates a sum type named ``type-name``.
An object of the type created can be instantiated using
any one of given type constructors.

::

    (pt Male (Int String))
    (pt Female (Int String))
    (st Person (Male Female))

creates a sum type ``Person`` that can be constructed using
either ``Male`` or ``Female`` type constructor.
``Male`` or ``Female`` type constructor expects an Int and a String.

::

    (st Animal (Male Female))
    (Male 15 "Mr. T")
    ==> Error: type of (Male 15 "Mr. T") ambiguous.

creates another sum type ``Animal`` that can be either ``Male`` or
``Female``. The Male object can be of type ``Person`` or ``Animal``
depending on the context it appears. Since it is ambiguous whether
the Male object is Animal or Person, an error is thrown.

Examples
========

::

    (def fib n
        (if (< n 2)
            n
            (+ (fib (- n 1)) (fib (- n 2)))))
    (fib 4)
    ==> 3

defines the function ``fib`` that computes n-th Fibonacci number.

::

    (def quick-sort l
        (case (
            ((is-empty l) l)
            (True (let (
                    (x (car l))
                    (xs (cdr l))
                    (lesser (filter (is-less x) xs))
                    (greater (filter (is-greater x) xs))
                )
                (concat
                    (concat
                        (quick-sort lesser)
                        (list x))
                    (quick-sort greater)
                )
            ))))
    )

is a quick sort implementation that takes ``(car l)``, head of the list,
as pivot point.
``(filter (is-less x) xs)`` is a list where elements are less than x.
``(filter (is-greater x) xs)`` is a list where elements are greater than x.
``(list x)`` creates a singleton list whose only element is x.
So, by concatenating sorted lesser, x, and sorted greater, the result list
is sorted.
