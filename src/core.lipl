# Prelude

(def map (f l) (if (isEmpty l)
                   l
                   (let {x = (head l), xs = (tail l)}
                        (cons (f x) (map f xs)))))

(def concat (l1 l2) (if (isEmpty l1)
                        l2
                        (let {x = (head l1), xs = (tail l1)}
                             (cons x (concat xs l2)))))
(def filter (f l)
     (if (isEmpty l)
         l
         (let {
                x  = (head l)
              , xs = (filter f (tail l))
              }
              (if (f x)
                  (cons x xs)
                  xs))))

# simple quick sort
(def quick-sort (l) (if (isEmpty l) # is the list empty?
    l
    (let {     x       = (head l)
             , xs      = (tail l)
             , lesser  = (filter (lambda (a) (< a x))  xs)
             , greater = (filter (lambda (a) (>= a x)) xs)
         }
         (concat (concat (quick-sort lesser)
                         (cons x []))
                 (quick-sort greater)))))

# (let { x = (head l), xs = (tail l) } (filter (lambda (a) (< a x))  xs))

(def filter_ (f l)
     (if (isEmpty l)
         l
         (if (f (head l))
             (cons (head l) (filter f (tail l)))
             (filter f (tail l)))))

(def qs (l)
     (if (isEmpty l)
         l
         (concat
                (concat
                       (qs
                            (filter (lambda (a) (< a (head l))) (tail l)))
                       (cons (head l) []))
                (qs (filter (lambda (a) (>= a (head l))) (tail l))))))

(def compose (f g x) (f (g x)))

(def apply (f x) (f x))

(def id (a) a)

(def trace (msg x) (if (println msg) x x))

(def t (x) (if (printVarLn x) x x))

(def fac (n) (if (<= n 1) 1 (* n (fac (- n 1)))))

(def fib (n)
    (if (< n 2)
        n
        (let { i = (fib (- n 1)), i-1 = (fib (- n 2)) }
             (+ i i-1))))

(def twice (f x) (f (f x)))

(def succ (x) (+ x 1))

{-
((twice twice succ) 0)
==> (twice (twice succ) 0)
==> ((twice succ) ((twice succ) 0))
==> (succ (succ ((twice succ) 0)))
==> (+ (succ ((twice succ) 0)) 1)
==> (+ (+ ((twice succ) 0) 1) 1)
==> (+ (+ (succ (succ 0)) 1) 1)
==> (+ (+ (succ 1) 1) 1)
==> (+ (+ 2 1) 1)
==> (+ 3 1)
==> 4

((twice (twice (twice succ))) 0)
==> ((twice (twice (succ (succ)))) 0)
==> (twice ((succ (succ)) ((succ (succ)))) 0)
==> ((succ succ) ((succ succ) 0))
==> ((succ succ) (succ (succ 0)))
==> ((succ succ) 2)
==> (succ (succ 2))
==> 4
-}

(def test (l)
     ((lambda (l)
            (let {   x = (head l)
                  , xs = (filter (lambda (a) (< a x)) l)} xs)) l))

(def test1 (l) (let {
                x = (head l)
                , xs = (map (lambda (a) (+ a x)) (tail l))
                }
                (cons x xs)))


(def hello (s) (println (concat "hello
                         world" (show s))))
